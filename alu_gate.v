/* Generated by Yosys 0.51 (git sha1 c4b5190229616f7ebf8197f43990b4429de3e420, x86_64-w64-mingw32-g++ 15.1.0 -march=nocona -msahf -mtune=generic -O2 -fstack-protector-strong -O3) */

module add4(A, B, SUM, COUT, OVF);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  input [3:0] A;
  wire [3:0] A;
  input [3:0] B;
  wire [3:0] B;
  output COUT;
  wire COUT;
  output OVF;
  wire OVF;
  output [3:0] SUM;
  wire [3:0] SUM;
  wire [4:0] full_sum;
  assign _00_ = B[3] ^ A[3];
  assign _01_ = ~(B[2] & A[2]);
  assign _02_ = ~(B[2] ^ A[2]);
  assign _03_ = B[1] & A[1];
  assign _04_ = ~(B[1] ^ A[1]);
  assign _05_ = ~(B[0] & A[0]);
  assign _06_ = ~(_05_ | _04_);
  assign _07_ = ~(_06_ | _03_);
  assign _08_ = ~(_07_ | _02_);
  assign _09_ = _01_ & ~(_08_);
  assign SUM[3] = ~(_09_ ^ _00_);
  assign _10_ = ~(SUM[3] ^ A[3]);
  assign OVF = ~(_10_ | _00_);
  assign SUM[0] = B[0] ^ A[0];
  assign SUM[1] = _05_ ^ _04_;
  assign SUM[2] = _07_ ^ _02_;
  assign _11_ = B[3] & A[3];
  assign _12_ = _00_ & ~(_01_);
  assign _13_ = ~(_12_ | _11_);
  assign _14_ = _02_ | ~(_00_);
  assign _15_ = ~(_14_ | _07_);
  assign COUT = _15_ | ~(_13_);
  assign full_sum = { COUT, SUM };
endmodule

module alu_4bit(A, B, op, Y, carry_out, zero, sign, overflow);
  input [3:0] A;
  wire [3:0] A;
  input [3:0] B;
  wire [3:0] B;
  output [3:0] Y;
  wire [3:0] Y;
  wire add_cout;
  wire add_ovf;
  wire [3:0] add_res;
  wire [3:0] and_r;
  wire arith_carry_borrow;
  wire arith_overflow;
  output carry_out;
  wire carry_out;
  input [2:0] op;
  wire [2:0] op;
  wire [3:0] or_r;
  output overflow;
  wire overflow;
  output sign;
  wire sign;
  wire sub_borrow;
  wire sub_ovf;
  wire [3:0] sub_res;
  wire [3:0] xor_r;
  output zero;
  wire zero;
  add4 u_add (
    .A(A),
    .B(B),
    .COUT(add_cout),
    .OVF(add_ovf),
    .SUM(add_res)
  );
  flag_unit u_flags (
    .Y(Y),
    .arith_carry_borrow(arith_carry_borrow),
    .arith_overflow(arith_overflow),
    .carry_out(carry_out),
    .op(op),
    .overflow(overflow),
    .sign(sign),
    .zero(zero)
  );
  logic4 u_logic (
    .A(A),
    .AND_R(and_r),
    .B(B),
    .OR_R(or_r),
    .XOR_R(xor_r)
  );
  alu_mux u_mux (
    .ADD_COUT(add_cout),
    .ADD_OVF(add_ovf),
    .ADD_RES(add_res),
    .AND_R(and_r),
    .OR_R(or_r),
    .SUB_BORROW(sub_borrow),
    .SUB_OVF(sub_ovf),
    .SUB_RES(sub_res),
    .XOR_R(xor_r),
    .Y(Y),
    .arith_carry_borrow(arith_carry_borrow),
    .arith_overflow(arith_overflow),
    .op(op)
  );
  sub4 u_sub (
    .A(A),
    .B(B),
    .BORROW(sub_borrow),
    .DIFF(sub_res),
    .OVF(sub_ovf)
  );
endmodule

module alu_mux(op, ADD_RES, SUB_RES, AND_R, OR_R, XOR_R, ADD_COUT, SUB_BORROW, ADD_OVF, SUB_OVF, Y, arith_carry_borrow, arith_overflow);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  input ADD_COUT;
  wire ADD_COUT;
  input ADD_OVF;
  wire ADD_OVF;
  input [3:0] ADD_RES;
  wire [3:0] ADD_RES;
  input [3:0] AND_R;
  wire [3:0] AND_R;
  input [3:0] OR_R;
  wire [3:0] OR_R;
  input SUB_BORROW;
  wire SUB_BORROW;
  input SUB_OVF;
  wire SUB_OVF;
  input [3:0] SUB_RES;
  wire [3:0] SUB_RES;
  input [3:0] XOR_R;
  wire [3:0] XOR_R;
  output [3:0] Y;
  wire [3:0] Y;
  output arith_carry_borrow;
  wire arith_carry_borrow;
  output arith_overflow;
  wire arith_overflow;
  input [2:0] op;
  wire [2:0] op;
  assign _000_ = ~op[2];
  assign _001_ = op[1] | ~(op[0]);
  assign _002_ = _001_ | ~(_000_);
  assign _003_ = op[1] | op[0];
  assign _004_ = _003_ | ~(_000_);
  assign _005_ = _004_ & _002_;
  assign _006_ = SUB_OVF & ~(_002_);
  assign _007_ = ADD_OVF & ~(_004_);
  assign _008_ = ~(_007_ | _006_);
  assign arith_overflow = ~(_008_ | _005_);
  assign _009_ = SUB_BORROW & ~(_002_);
  assign _010_ = ADD_COUT & ~(_004_);
  assign _011_ = ~(_010_ | _009_);
  assign arith_carry_borrow = ~(_011_ | _005_);
  assign _012_ = ~(op[1] & op[0]);
  assign _013_ = op[2] ? _003_ : _012_;
  assign _014_ = op[0] | ~(op[1]);
  assign _015_ = _014_ | ~(_000_);
  assign _016_ = ~(_015_ & _002_);
  assign _017_ = _016_ | ~(_013_);
  assign _018_ = _004_ & ~(_017_);
  assign _019_ = _003_ | ~(op[2]);
  assign _020_ = XOR_R[0] & ~(_019_);
  assign _021_ = _012_ | ~(_000_);
  assign _022_ = OR_R[0] & ~(_021_);
  assign _023_ = ~(_022_ | _020_);
  assign _024_ = _015_ | ~(AND_R[0]);
  assign _025_ = SUB_RES[0] & ~(_002_);
  assign _026_ = _025_ | ~(_024_);
  assign _027_ = _026_ | ~(_023_);
  assign _028_ = ADD_RES[0] & ~(_004_);
  assign _029_ = ~(_028_ | _027_);
  assign Y[0] = ~(_029_ | _018_);
  assign _030_ = XOR_R[1] & ~(_019_);
  assign _031_ = OR_R[1] & ~(_021_);
  assign _032_ = ~(_031_ | _030_);
  assign _033_ = _015_ | ~(AND_R[1]);
  assign _034_ = SUB_RES[1] & ~(_002_);
  assign _035_ = _034_ | ~(_033_);
  assign _036_ = _035_ | ~(_032_);
  assign _037_ = ADD_RES[1] & ~(_004_);
  assign _038_ = ~(_037_ | _036_);
  assign Y[1] = ~(_038_ | _018_);
  assign _039_ = XOR_R[2] & ~(_019_);
  assign _040_ = OR_R[2] & ~(_021_);
  assign _041_ = ~(_040_ | _039_);
  assign _042_ = _015_ | ~(AND_R[2]);
  assign _043_ = SUB_RES[2] & ~(_002_);
  assign _044_ = _043_ | ~(_042_);
  assign _045_ = _044_ | ~(_041_);
  assign _046_ = ADD_RES[2] & ~(_004_);
  assign _047_ = ~(_046_ | _045_);
  assign Y[2] = ~(_047_ | _018_);
  assign _048_ = XOR_R[3] & ~(_019_);
  assign _049_ = OR_R[3] & ~(_021_);
  assign _050_ = ~(_049_ | _048_);
  assign _051_ = _015_ | ~(AND_R[3]);
  assign _052_ = SUB_RES[3] & ~(_002_);
  assign _053_ = _052_ | ~(_051_);
  assign _054_ = _053_ | ~(_050_);
  assign _055_ = ADD_RES[3] & ~(_004_);
  assign _056_ = ~(_055_ | _054_);
  assign Y[3] = ~(_056_ | _018_);
endmodule

module flag_unit(Y, arith_carry_borrow, arith_overflow, op, carry_out, zero, sign, overflow);
  wire _0_;
  wire _1_;
  input [3:0] Y;
  wire [3:0] Y;
  input arith_carry_borrow;
  wire arith_carry_borrow;
  input arith_overflow;
  wire arith_overflow;
  output carry_out;
  wire carry_out;
  input [2:0] op;
  wire [2:0] op;
  output overflow;
  wire overflow;
  output sign;
  wire sign;
  output zero;
  wire zero;
  assign _0_ = Y[1] | Y[0];
  assign _1_ = Y[3] | Y[2];
  assign zero = ~(_1_ | _0_);
  assign carry_out = arith_carry_borrow;
  assign overflow = arith_overflow;
  assign sign = Y[3];
endmodule

module logic4(A, B, AND_R, OR_R, XOR_R);
  input [3:0] A;
  wire [3:0] A;
  output [3:0] AND_R;
  wire [3:0] AND_R;
  input [3:0] B;
  wire [3:0] B;
  output [3:0] OR_R;
  wire [3:0] OR_R;
  output [3:0] XOR_R;
  wire [3:0] XOR_R;
  assign AND_R[0] = B[0] & A[0];
  assign AND_R[1] = B[1] & A[1];
  assign AND_R[2] = B[2] & A[2];
  assign AND_R[3] = B[3] & A[3];
  assign OR_R[0] = B[0] | A[0];
  assign OR_R[1] = B[1] | A[1];
  assign OR_R[2] = B[2] | A[2];
  assign OR_R[3] = B[3] | A[3];
  assign XOR_R[0] = B[0] ^ A[0];
  assign XOR_R[1] = B[1] ^ A[1];
  assign XOR_R[2] = B[2] ^ A[2];
  assign XOR_R[3] = B[3] ^ A[3];
endmodule

module sub4(A, B, DIFF, BORROW, OVF);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  input [3:0] A;
  wire [3:0] A;
  input [3:0] B;
  wire [3:0] B;
  output BORROW;
  wire BORROW;
  output [3:0] DIFF;
  wire [3:0] DIFF;
  output OVF;
  wire OVF;
  wire [4:0] full_diff;
  assign DIFF[0] = A[0] ^ B[0];
  assign _00_ = ~(A[3] ^ B[3]);
  assign _01_ = B[2] | ~(A[2]);
  assign _02_ = A[2] ^ B[2];
  assign _03_ = A[1] & ~(B[1]);
  assign _04_ = A[1] ^ B[1];
  assign _05_ = B[0] & ~(A[0]);
  assign _06_ = ~(_05_ | _04_);
  assign _07_ = ~(_06_ | _03_);
  assign _08_ = ~(_07_ | _02_);
  assign _09_ = _01_ & ~(_08_);
  assign DIFF[3] = ~(_09_ ^ _00_);
  assign _10_ = ~(DIFF[3] ^ A[3]);
  assign OVF = ~(_10_ | _00_);
  assign DIFF[1] = _05_ ^ _04_;
  assign DIFF[2] = _07_ ^ _02_;
  assign _11_ = A[3] & ~(B[3]);
  assign _12_ = _00_ & ~(_01_);
  assign _13_ = ~(_12_ | _11_);
  assign _14_ = _02_ | ~(_00_);
  assign _15_ = ~(_14_ | _07_);
  assign BORROW = _15_ | ~(_13_);
  assign full_diff = { 1'hx, DIFF };
endmodule
